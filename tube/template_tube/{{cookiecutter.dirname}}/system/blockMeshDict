/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1812                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   0.01;
// All distances in cm

var {
    Length         {{cookiecutter.len_cm}}; // 1000
    Radius         {{(cookiecutter.radius_mm|float) * 1e-1}}; // 25
    nRadius        #calc "-$Radius"; // -25
    Boxradius      #calc "0.4 * $Radius"; // 10
    nBoxradius     #calc "-$Boxradius"; // -10
    Diagonal       #calc "sin(degToRad(45)) * $Radius"; // 17.68
    nDiagonal      #calc "-$Diagonal"; // -17.68
    RadiusCells    {{cookiecutter.cells}}; // 10
    LengthCells    #calc "floor($RadiusCells * 0.5 * ($Length / ($Radius * 2)))"; // 200
}

vertices
(
    ($:var.nBoxradius   $:var.Boxradius   0           ) // 0
    ($:var.nBoxradius  $:var.nBoxradius   0           )
    ( $:var.Boxradius  $:var.nBoxradius   0           )
    ( $:var.Boxradius   $:var.Boxradius   0           )
    ($:var.nDiagonal    $:var.Diagonal    0           ) // 4
    ($:var.nDiagonal   $:var.nDiagonal    0           )
    ( $:var.Diagonal   $:var.nDiagonal    0           )
    ( $:var.Diagonal    $:var.Diagonal    0           )
    ($:var.nBoxradius   $:var.Boxradius   $:var.Length) // 8
    ($:var.nBoxradius  $:var.nBoxradius   $:var.Length)
    ( $:var.Boxradius  $:var.nBoxradius   $:var.Length)
    ( $:var.Boxradius   $:var.Boxradius   $:var.Length)
    ($:var.nDiagonal    $:var.Diagonal    $:var.Length) // 12
    ($:var.nDiagonal   $:var.nDiagonal    $:var.Length)
    ( $:var.Diagonal   $:var.nDiagonal    $:var.Length)
    ( $:var.Diagonal    $:var.Diagonal    $:var.Length)
);

blocks
(
    hex ( 0  1  2  3   8  9 10 11) ($:var.RadiusCells $:var.RadiusCells $:var.LengthCells) simpleGrading (  1   1   1)
    hex ( 0  4  5  1   8 12 13  9) ($:var.RadiusCells $:var.RadiusCells $:var.LengthCells) simpleGrading (0.5   1   1)
    hex ( 1  5  6  2   9 13 14 10) ($:var.RadiusCells $:var.RadiusCells $:var.LengthCells) simpleGrading (0.5   1   1)
    hex ( 2  6  7  3  10 14 15 11) ($:var.RadiusCells $:var.RadiusCells $:var.LengthCells) simpleGrading (0.5   1   1)
    hex ( 3  7  4  0  11 15 12  8) ($:var.RadiusCells $:var.RadiusCells $:var.LengthCells) simpleGrading (0.5   1   1)
);

edges
(
    arc  4  5 ($:var.nRadius  0             0           )
    arc  5  6 ( 0            $:var.nRadius  0           )
    arc  6  7 ( $:var.Radius  0             0           )
    arc  7  4 ( 0             $:var.Radius  0           )
    arc 12 13 ($:var.nRadius  0             $:var.Length)
    arc 13 14 ( 0            $:var.nRadius  $:var.Length)
    arc 14 15 ( $:var.Radius  0             $:var.Length)
    arc 15 12 ( 0             $:var.Radius  $:var.Length)
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 1 2 3)
            (0 4 5 1)
            (1 5 6 2)
            (2 6 7 3)
            (3 7 4 0)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            ( 8  9 10 11)
            ( 8 12 13  9)
            ( 9 13 14 10)
            (10 14 15 11)
            (11 15 12  8)
        );
    }
    walls
    {
        type patch;
        faces
        (
            ( 4 12 15  7)
            ( 7 15 14  6)
            (13  5  6 14)
            ( 5 13 12  4)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
