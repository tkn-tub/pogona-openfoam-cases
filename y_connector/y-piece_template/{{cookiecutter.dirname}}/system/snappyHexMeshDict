/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1906                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Modified version of OpenFOAM/tutorials/mesh/snappyHexMesh/motorBike/system/snappyHexMeshDict
// TODO: adapt to our y-connector

// Which of the steps to run
castellatedMesh true; // make basic mesh?
snap            true; // snap back to suface?
// Add viscous layers:
addLayers       true; // add viscous layers? (cp. YouTube tutorial: 47:00)
// IMPORTANT: set addLayers to false when first creating your mesh (according to YouTube tutorial, 25:40: "Normally the source of about 90% of any problems you have.", "If your background mesh isn't any good, there's no point even thinking about adding the layers."


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    combined.stl
    {
        type triSurfaceMesh;
        name combinedMesh;
    }

    backgroundInletPatch.stl
    {
        type triSurfaceMesh;
        name backgroundInletPatch;
    }

    particleInletPatch.stl
    {
        type triSurfaceMesh;
        name particleInletPatch;
    }

    yConnectorPatch.stl
    {
        type triSurfaceMesh;
        name yConnectorPatch;
    }

    outletPatch.stl
    {
        type triSurfaceMesh;
        name outletPatch;
    }

    // You may also define named custom regions for refinement:
    //refinementBox
    //{
    //    type box;
    //    min  (-0.001  0.029 -0.004);
    //    max  ( 0.001  0.081  0.001);
    //}
}


// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 100000; // "max cells per CPU core"

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 2000000; // "max cells to use before mesh deletion step"

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 150; // default: 10?

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 1; // was 3, but as YouTube tutorial says: not much room for this in small models (49:40)



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        // If you have split your mesh across several .stl files,
        // you can specify different levels of refinement here!
        {
            file "backgroundInletPatch.eMesh"; // This file should be in const/triSurface after running surfaceFeatureExtract
            level 0; // in YouTube tutorial: 3; TODO: is higher more refined or less?
        }
        {file "outletPatch.eMesh"; level 0;} // was 3
        {file "particleInletPatch.eMesh"; level 0;} // was 3
        {file "yConnectorPatch.eMesh"; level 0;} // was 4
        // excluding combined_mesh.eMesh (won't even be generated with surfaceFeatureExtract)
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        // Surface-wise min and max refinement level
        backgroundInletPatch {level (0 0);}
        particleInletPatch {level (0 0);}
        outletPatch {level (0 0);}
        yConnectorPatch {level (0 0);} // was (4 4)

        //yConnector
        //{
        //    level (5 6);

        //    // Optional specification of patch type (default is wall). No
        //    // constraint types (cyclic, symmetry) etc. are allowed.
        //    patchInfo
        //    {
        //        type wall;
        //        inGroups (yConnectorGroup); // TODO: Where is yConnectorGroup defined? Here? Consider removing this optional specification.
        //    }
        //}
    }

    // Resolve sharp angles
    resolveFeatureAngle 80; // YouTube tutorial: "…I would recomment to put to a reasonably high number" (80), was 30


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // -> fine detail towards the outer surface of the volume, less detail towards the center

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        refinementBox
        {
            mode inside;
            levels ((1E15 4));
        }
    }

    // TODO: see YouTube tutorial 30:00: distance-based refinement, starts with `refinementRegions {volume {mode distance; …`, where `volume` is the name of the patch that includes all the other patches combined (as it was set up in that tutorial)
    // -> 47:00
    // This would be an alternative to `mode inside` (see above)

    // Mesh selection
    // ~~~~~~~~~~~~~~

    // IMPORTANT: Adapt to yConnector! Some point inside a cell and *inside* the flow volume!
    //
    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0 0.0001 0);


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 2.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    // Feature snapping

    //- Number of feature edge snapping iterations.
    //  Leave out altogether to disable.
    nFeatureSnapIter 10;

    //- Detect (geometric only) features by sampling the surface
    //  (default=false).
    implicitFeatureSnap false;

    //- Use castellatedMeshControls::features (default = true)
    explicitFeatureSnap true;

    //- Detect points on multiple surfaces (only for explicitFeatureSnap)
    multiRegionFeatureSnap false;
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes false; // was true

    // Per final patch (so not geometry!) the layer information
    layers
    {
        //"(lowerWall|motorBike).*"
        //{
        //    nSurfaceLayers 1;
        //}
        yConnectorPatch {nSurfaceLayers 3;}
        particleInletPatch {nSurfaceLayers 0;}
        outletPatch {nSurfaceLayers 0;}
        backgroundInletPatch {nSurfaceLayers 0;}
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    // YouTube tutorial: 43:50
    finalLayerThickness 0.0001;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.00003;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 1.7.x! (didn't do anything in 1.7.x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 60;

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 3;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 1.7.x! 90 degrees corresponds to 130
    // in 1.7.x.
    minMedialAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"


    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Write flags
writeFlags
(
    scalarLevels
    layerSets
    layerFields     // write volScalarField for layer coverage
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

debug 0; // if 1, mesh will be saved after every stage

// ************************************************************************* //
